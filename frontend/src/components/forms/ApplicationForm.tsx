import React, { useState } from 'react';
import { Button, Textarea, Select, Card, CardHeader, CardBody } from '../ui';
interface ApplicationFormData {
  resumeId: string;
  coverLetter: string;
}
interface Resume {
  id: string;
  title: string;
  lastUpdated: string;
}
interface ApplicationFormProps {
  jobId?: string;
  jobTitle: string;
  companyName?: string;
  resumes?: Resume[];
  onSubmit: (data: ApplicationFormData) => void;
  onCancel?: () => void;
  loading?: boolean;
  isSubmitting?: boolean;
}
export const ApplicationForm: React.FC<ApplicationFormProps> = ({
  jobTitle,
  companyName,
  resumes = [],
  onSubmit,
  onCancel,
  loading = false,
  isSubmitting = false,
}) => {
  const [formData, setFormData] = useState<ApplicationFormData>({
    resumeId: '',
    coverLetter: '',
  });
  const [errors, setErrors] = useState<Partial<ApplicationFormData>>({});
  const handleChange = (field: keyof ApplicationFormData, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };
  const validateForm = (): boolean => {
    const newErrors: Partial<ApplicationFormData> = {};
    if (!formData.resumeId) {
      newErrors.resumeId = '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—é–º–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏';
    }
    if (!formData.coverLetter.trim()) {
      newErrors.coverLetter = '–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    } else if (formData.coverLetter.trim().length < 50) {
      newErrors.coverLetter = '–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤';
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (validateForm()) {
      onSubmit(formData);
    }
  };
  const resumeOptions = resumes.map(resume => ({
    value: resume.id,
    label: `${resume.title} (–æ–±–Ω–æ–≤–ª–µ–Ω–æ ${new Date(resume.lastUpdated).toLocaleDateString('ru-RU')})`,
  }));
  return (
    <Card className="max-w-2xl mx-auto">
      <CardHeader>
        <h2 className="text-2xl font-bold text-gray-900">–û—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é</h2>
        <div className="mt-2 text-secondary-600">
          <p className="font-medium">{jobTitle}</p>
          <p className="text-sm">{companyName}</p>
        </div>
      </CardHeader>
      <CardBody>
        <form onSubmit={handleSubmit} className="space-y-6">
          {}
          <div>
            <Select
              label="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—é–º–µ *"
              placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—é–º–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"
              options={resumeOptions}
              value={formData.resumeId}
              onChange={(e) => handleChange('resumeId', e.target.value)}
              error={errors.resumeId}
              help={resumes.length === 0 ? '–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ. –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑—é–º–µ –ø–µ—Ä–µ–¥ –ø–æ–¥–∞—á–µ–π –æ—Ç–∫–ª–∏–∫–∞.' : undefined}
            />
            {resumes.length === 0 && (
              <div className="mt-4 p-4 bg-warning-50 border border-warning-200 rounded-lg">
                <p className="text-warning-800 text-sm">
                  –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—é–º–µ. 
                  <a href="/create-resume" className="font-medium underline ml-1">
                    –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑—é–º–µ
                  </a>
                  , —á—Ç–æ–±—ã –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é.
                </p>
              </div>
            )}
          </div>
          {}
          <div>
            <Textarea
              label="–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ *"
              placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ—á–µ–º—É –≤—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –¥–ª—è —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏. –û–ø–∏—à–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é..."
              value={formData.coverLetter}
              onChange={(e) => handleChange('coverLetter', e.target.value)}
              error={errors.coverLetter}
              rows={8}
              help="–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å—ã –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è"
            />
            <div className="mt-2 text-sm text-secondary-500">
              –°–∏–º–≤–æ–ª–æ–≤: {formData.coverLetter.length} / –º–∏–Ω–∏–º—É–º 50
            </div>
          </div>
          {}
          <div className="bg-primary-50 border border-primary-200 rounded-lg p-4">
            <h4 className="font-medium text-primary-900 mb-2">üí° –°–æ–≤–µ—Ç—ã –¥–ª—è —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞:</h4>
            <ul className="text-sm text-primary-800 space-y-1">
              <li>‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏, –µ—Å–ª–∏ –æ–Ω–æ —É–∫–∞–∑–∞–Ω–æ</li>
              <li>‚Ä¢ –£–ø–æ–º—è–Ω–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏</li>
              <li>‚Ä¢ –ü—Ä–∏–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –≤–∞—à–µ–≥–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –æ–ø—ã—Ç–∞</li>
              <li>‚Ä¢ –û–±—ä—è—Å–Ω–∏—Ç–µ, –ø–æ—á–µ–º—É –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∏–º–µ–Ω–Ω–æ —ç—Ç–∞ –∫–æ–º–ø–∞–Ω–∏—è</li>
              <li>‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –∏ –∏–∑–±–µ–≥–∞–π—Ç–µ –æ–±—â–∏—Ö —Ñ—Ä–∞–∑</li>
            </ul>
          </div>
          {}
          <div className="flex flex-col sm:flex-row gap-4 pt-6 border-t border-secondary-200">
            <Button
              type="submit"
              loading={loading || isSubmitting}
              disabled={resumes.length === 0}
              className="flex-1 sm:flex-none"
            >
              {(loading || isSubmitting) ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫'}
            </Button>
            {onCancel && (
              <Button
                type="button"
                variant="secondary"
                onClick={onCancel}
                className="flex-1 sm:flex-none"
              >
                –û—Ç–º–µ–Ω–∞
              </Button>
            )}
          </div>
        </form>
      </CardBody>
    </Card>
  );
};
